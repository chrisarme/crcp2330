// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

	// USE MOST SIGNIFICANT BIT TO DETERMINE A OR C INSTRUCTION

	Mux16(a=instruction, b=outALU, sel=instruction[15], out=instrALUMux);

	// Compare the opposite of instruction[15] and instruction[5] to see if should change A Register
	Not(in=instruction[15], out=AorCInstr);
	Or(a=AorCInstr, b=instruction[5], out=shouldAReg);

	ARegister(in=instrALUMux, load=shouldAReg, out[0..14]=addressM, out=outAReg);

	// Another mux with outAReg and inM with the selector of the decoded instructions
	// sel is instructions[15] (is c instr) and instructions[12] (a = 1)
	And(a=instruction[15], b=instruction[12], out=AorM);
	Mux16(a=outAReg, b=inM, sel=AorM, out=inMAndARegMux);

	// C INPUTS (c1, c2, c3, c4, c5, c6) FROM INSTRUCTION
	// need another output that can be used by other chips (outALU)
	ALU(x=outDReg, y=inMAndARegMux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zrALU, ng=ngALU);

	//DRegister feedback into ALU
	// sel is instr[15] (c instr) and instr[4] (D reg is destination)
	And(a=instruction[15], b=instruction[4], out=isDRegDestination);
	DRegister(in=outALU, load=isDRegDestination, out=outDReg);

	// COMPARE DESTINATION AND JUMP FOR CORRECT COMMAND
	// check if postitive number
	Not(in=ngALU, out=posALU);
	Not(in=zrALU, out=nzrALU);
	And(a=posALU, b=nzrALU, out=isNzrPosALU);

	// if instr[15] (c) and instr[0] (jump if greater than 0) then JGT
	And(a=instruction[15], b=instruction[0], out=JGT);
	And(a=JGT, b=isNzrPosALU, out=jumpCheckJGT);

	// if instr[15] and instr[1] (jump if = 0) then JEQ
	And(a=instruction[15], b=instruction[1], out=JEQ);
	And(a=JEQ, b=zrALU, out=jumpCheckJEQ);

	// if instr[15] and instr[2] (jump if less than 0) then JLT
	And(a=instruction[15], b=instruction[2], out=JLT);
	And(a=JLT, b=ngALU, out=jumpCheckJLT);

	// check if should jump AT ALL
	Or(a=jumpCheckJGT, b=jumpCheckJEQ, out=jumpCheck1);
	Or(a=jumpCheck1, b=jumpCheckJLT, out=jumpCheckFinal);


	PC(in=outAReg, load=jumpCheckFinal, inc=true, reset=reset, out[0..14]=pc);
}