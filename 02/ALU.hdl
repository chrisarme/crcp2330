// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   //Not(in=nx, out=notnx);
   //Not(in=ny, out=notny);
   Not(in=zx, out=notzx);
   Not(in=zy, out=notzy);

   // Find final x value
   Mux16(a=x, b[0..15]=false, sel=zx, out=xZeroCheck); // This checks if the x input needs to be zeroed, and does so if necessary
   Not16(in=xZeroCheck, out=notx); // This creates a negated x value in case it needs to be used
   Mux16(a=xZeroCheck, b=notx, sel=nx, out=xRealValue); // This checks if the notx value needs to be selected for the final x value

   // Find final y value
   Mux16(a=y, b[0..15]=false, sel=zy, out=yZeroCheck); // This checks if the y input needs to be zeroed, and does so if necessary
   Not16(in=yZeroCheck, out=noty); // This creates a negated y value in case it needs to be used
   Mux16(a=yZeroCheck, b=noty, sel=ny, out=yRealValue); // This checks if the noty value needs to be selected for the final y value

   // Figure out if out should be x + y or x & y
   Add16(a=xRealValue, b=yRealValue, out=xplusy);
   And16(a=xRealValue, b=yRealValue, out=xandy);
   Mux16(a=xandy, b=xplusy, sel=f, out=xyFunction);

   // Find if the output should be negated
   Not16(in=xyFunction, out=notxyFunction);
   Mux16(a=xyFunction, b=notxyFunction, sel=no, out=selectedxyFunction);

   // Find zr and ng
   Or16WayAdded(in=selectedxyFunction, out=anyTrue);
   Not(in=anyTrue, out=zr);

   And16(a=selectedxyFunction, b[0..15]=true, out[15]=ng, out[0..14]=UNCESSESARY);
   Or16(a=selectedxyFunction, b[0..15]=false, out=out);

}